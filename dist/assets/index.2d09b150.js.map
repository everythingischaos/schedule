{"version":3,"file":"index.2d09b150.js","sources":["../../vite/modulepreload-polyfill","../../script.js"],"sourcesContent":["__VITE_IS_MODERN__&&(function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n}());","//check if browser supports storage\nlet hasStorage = false;\nif (typeof Storage !== 'undefined') {\n  hasStorage = true;\n} else {\n  hasStorage = false;\n}\n\n//Register service worker\n// const registerServiceWorker = async () => {\n//   if ('serviceWorker' in navigator) {\n//     try {\n//       const registration = await navigator.serviceWorker.register(\n//         './service-worker.js'\n//       );\n//       if (registration.installing) {\n//         console.log('Service worker installing');\n//       } else if (registration.waiting) {\n//         console.log('Service worker installed');\n//       } else if (registration.active) {\n//         console.log('Service worker active');\n//       }\n//     } catch (error) {\n//       console.error(`Registration failed with ${error}`);\n//     }\n//   }\n// };\n\n// â€¦\n\n// registerServiceWorker();\n\n//the default schedule\nlet defaultAllSchedules = JSON.parse(\n  '[[{\"name\":\"1\",\"start\":\"8:30\",\"end\":\"9:15\"},{\"name\":\"2\",\"start\":\"9:20\",\"end\":\"10:10\"},{\"name\":\"3\",\"start\":\"10:15\",\"end\":\"11:05\"},{\"name\":\"Break\",\"start\":\"11:05\",\"end\":\"11:20\"},{\"name\":\"4\",\"start\":\"11:25\",\"end\":\"12:15\"},{\"name\":\"5\",\"start\":\"12:20\",\"end\":\"13:10\"},{\"name\":\"Lunch\",\"start\":\"13:10\",\"end\":\"13:40\"},{\"name\":\"6\",\"start\":\"13:45\",\"end\":\"14:35\"},{\"name\":\"7\",\"start\":\"14:40\",\"end\":\"15:30\"}],[{\"name\":\"1\",\"start\":\"8:30\",\"end\":\"9:36\"},{\"name\":\"3\",\"start\":\"9:41\",\"end\":\"11:18\"},{\"name\":\"Break\",\"start\":\"11:18\",\"end\":\"11:33\"},{\"name\":\"5\",\"start\":\"11:38\",\"end\":\"13:15\"},{\"name\":\"Lunch\",\"start\":\"13:15\",\"end\":\"13:48\"},{\"name\":\"7\",\"start\":\"13:53\",\"end\":\"15:30\"}],[{\"name\":\"2\",\"start\":\"8:30\",\"end\":\"10:07\"},{\"name\":\"Tutorial\",\"start\":\"10:12\",\"end\":\"11:18\"},{\"name\":\"Break\",\"start\":\"11:18\",\"end\":\"11:33\"},{\"name\":\"4\",\"start\":\"11:38\",\"end\":\"13:15\"},{\"name\":\"Lunch\",\"start\":\"13:15\",\"end\":\"13:48\"},{\"name\":\"6\",\"start\":\"13:53\",\"end\":\"15:30\"}],[{\"name\":\"1\",\"start\":\"8:30\",\"end\":\"9:36\"},{\"name\":\"3\",\"start\":\"9:41\",\"end\":\"11:18\"},{\"name\":\"Break\",\"start\":\"11:18\",\"end\":\"11:33\"},{\"name\":\"5\",\"start\":\"11:38\",\"end\":\"13:15\"},{\"name\":\"Lunch\",\"start\":\"13:15\",\"end\":\"13:48\"},{\"name\":\"7\",\"start\":\"13:53\",\"end\":\"15:30\"}],[{\"name\":\"1\",\"start\":\"8:30\",\"end\":\"9:36\"},{\"name\":\"2\",\"start\":\"9:41\",\"end\":\"11:18\"},{\"name\":\"Break\",\"start\":\"11:18\",\"end\":\"11:33\"},{\"name\":\"4\",\"start\":\"11:38\",\"end\":\"13:15\"},{\"name\":\"Lunch\",\"start\":\"13:15\",\"end\":\"13:48\"},{\"name\":\"6\",\"start\":\"13:53\",\"end\":\"15:30\"}]]'\n);\n\nlet latestIntervalID;\n\n//used to change the time for debugging\nfunction newDebugDate() {\n  let date = new Date();\n\n  let hours = 0;\n  let minutes = hours * 60 + 0;\n  let seconds = minutes * 60 + 0;\n  let ms = seconds * 1000 + 0;\n  date.setTime(date.getTime() + ms);\n  return date;\n}\n\nlet override;\nlet nextTime;\n\nfunction checkForChanges() {\n  //get the schedule json in case it's been updated\n  fetch(\n    'https://gist.githubusercontent.com/piguyisme/e652e0a5009f17efde347c390767d069/raw/schedule.json?=' +\n      Math.floor(Math.random() * 1000),\n    { cache: 'no-store' }\n  ).then(\n    async (data) => {\n      const response = await data.json();\n      if (response != defaultAllSchedules) {\n        defaultAllSchedules = response;\n        generateSchedule(defaultAllSchedules);\n      }\n    },\n    () => {\n      // showAlert('Network error, schedule might not be up to date');\n    }\n  );\n\n  //get the override data for rallies and stuff\n  fetch(\n    'https://gist.githubusercontent.com/piguyisme/db88af35c569b7b5a8aff60c679f527c/raw/overrides.json?=' +\n      Math.floor(Math.random() * 1000),\n    { cache: 'no-store' }\n  ).then(\n    async (data) => {\n      const response = await data.json();\n      if (JSON.stringify(response) != JSON.stringify(override)) {\n        override = response;\n        generateSchedule(defaultAllSchedules);\n      }\n    },\n    () => {\n      // showAlert('Network error, schedule might not be up to date');\n    }\n  );\n}\n\ncheckForChanges();\nsetInterval(checkForChanges, 10000);\n\n/**\n * Generate list of time events (start/ends)\n * @param {Object[]} allSchedules - Array of all schedules in the week\n */\nfunction generateSchedule(allSchedules) {\n  let dayNum = newDebugDate().getDay();\n  let currentSchedule;\n  if (override) {\n    const curDate = newDebugDate();\n    const dateString = `${curDate.getDate()}-${\n      curDate.getMonth() + 1\n    }-${curDate.getFullYear()}`;\n\n    if (override[dateString]) {\n      currentSchedule = override[dateString];\n    } else {\n      currentSchedule = allSchedules[dayNum - 1];\n    }\n  } else {\n    currentSchedule = allSchedules[dayNum - 1];\n  }\n  if ((dayNum == 0 || dayNum == 6) && !override) {\n    document.querySelector('#timer').textContent = 'No school today!';\n    return;\n  } else {\n    document.querySelector('#periods').innerHTML = '<tr><th>Period</th><th>Start</th><th>End</th></tr>';\n\n    //will have the time events pushed to it\n    let times = [];\n    if (latestIntervalID) {\n      clearInterval(latestIntervalID);\n    }\n\n    //for each period\n    for (let i = 0; i < currentSchedule.length; i++) {\n      let currentP = currentSchedule[i];\n\n      //converts the 00:00 format to an actual date object, then turn it into a ms timestamp\n      let start = timeStringToDate(currentP.start);\n      let end = timeStringToDate(currentP.end);\n\n      //push the start and end timestamps to times\n      times.push({\n        time: start.getTime(),\n        name: 'Start of ' + currentP.name,\n      });\n      times.push({\n        time: end.getTime(),\n        name: 'End of ' + currentP.name,\n      });\n\n      let startAPM = start.toLocaleString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true,\n      });\n      let endAPM = end.toLocaleString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true,\n      });\n\n      //Add period to schedule in the DOM\n      //Set user-define period title if it exists\n      let pTitle;\n      if (\n        currentP.name != 'Break' &&\n        currentP.name != 'Lunch' &&\n        !currentP.name.includes('walkout') /**Temporary for protest */ &&\n        getClassName(currentP.name)\n      ) {\n        pTitle = currentP.name + ': ' + getClassName(currentP.name);\n      } else {\n        //set it to default if there is no user-defined title\n        pTitle = currentP.name;\n      }\n\n      //Create table row\n      let tr = '<tr';\n      if (currentP.name.includes('walkout')) {\n        tr += ' class=\"walkout\"';\n      } else if (currentP.name == 'Break' || currentP.name == 'Lunch') {\n        tr += ' class=\"break\"';\n      } else {\n        tr += ' value=' + currentP.name;\n      }\n      tr += `>\n      <td>${pTitle}</td>\n      <td>${startAPM}</td>\n      <td>${currentP.name.includes('walkout') ? '~' : ''}${endAPM}</td>\n    </tr>`;\n      document.getElementById('periods').innerHTML += tr;\n    }\n\n    // $('.pinput').each(function (i) {\n    //   $(this).val(getClassName(String(i + 1)));\n    // });\n    document.querySelectorAll('.pinput').forEach((el, i) => {\n      const name = getClassName(String(i + 1));\n      el.value = name ? name : '';\n    })\n\n    //Render timer every 1 ms\n    latestIntervalID = setInterval(renderTimer, 1, times, dayNum);\n  }\n}\n\n/**\n * Get the user-defined title of a period from the system-defined one (dependent on date)\n * @param {string} period - The system-defined title for a period ('1', '5', 'Break', etc.)\n * @returns {(string|undefined)} The user-defined title if storage is supported and there is one\n */\nfunction getClassName(period) {\n  //If the period isn't Lunch or Break, and the browser allows appStorage\n  if (hasStorage) {\n    //if it does, get the name of the period if it exists\n    return localStorage.getItem(period)\n      ? localStorage.getItem(period)\n      : undefined;\n  } else {\n    return undefined;\n  }\n}\n\n//Create original schedule\ngenerateSchedule(defaultAllSchedules);\n\n/**\n * Converts 00:00 to date object (dependent on date)\n * @param {string} timeString - The time in HH:SS format\n * @returns {Date} The parsed time in the current day at the given time\n */\nfunction timeStringToDate(timeString) {\n  //create a new date object for current time\n  let output = newDebugDate();\n\n  //create array of x:y [x, y]\n  let numbers = timeString.split(':');\n\n  //set the time of the date object to the numbers with curent date and 0 ms\n  output.setHours(numbers[0], numbers[1], 0);\n  return output;\n}\n\n/**\n * Find the next event (start/end of period/break)\n * @param {Object[]} timesList - Array of all the time events with timestamp\n * @param {number} timesList[].time - Unix timestamp of the event\n * @param {string} timesList[].name - System-defined name for the event\n * @returns Returns object with the next event's timestamp and name\n */\nfunction findNext(timesList) {\n  //create current date\n  let curDate = newDebugDate();\n\n  //for every event, check to see if it's passed\n  for (let i = 0; i < timesList.length; i++) {\n    //if the current time is before the event time, break the loop and return it\n    if (timesList[i].time >= curDate.getTime()) {\n      return timesList[i];\n    }\n  }\n\n  //if all events have passed, return undefined\n  return undefined;\n}\n\n//set the next event\nlet prevSec = 0;\nlet prevNext = 0;\n\n/**\n * Render the timer till next event\n * @param {Object} nextEvent - Object containing the next event's info\n * @param {number} nextEvent.time - Unix timestamp of the event\n * @param {string} nextEvent.name - System-defined name for the event\n */\nfunction renderTimer(times, dayNum) {\n  if (dayNum != newDebugDate().getDay()) {\n    generateSchedule(defaultAllSchedules);\n  }\n\n  nextTime = findNext(times);\n\n  //Set current date\n  let curDate = newDebugDate();\n\n  //define timer element\n  let timerDOM = document.getElementById('timer');\n\n  //if there is an event coming up\n  if (nextTime) {\n    //check if the event is still ahead and not past\n    let difference = nextTime.time - curDate.getTime();\n\n    //Set text to set the timer to, parsed with the msToTime thing\n    let text = msToTime(difference);\n    if (document.visibilityState == 'visible') {\n      //Set timer object to the data returned\n\n      timerDOM.innerHTML =\n        text.minutes + ':' + text.seconds + '.' + text.milliseconds;\n      if (prevNext != nextTime) {\n        document.querySelector('#next').textContent = (\n          'Until ' +\n            nextTime.name +\n            (getClassName(nextTime.name.slice(-1))\n              ? ': ' + getClassName(nextTime.name.slice(-1))\n              : '')\n        );\n        prevNext = nextTime;\n      }\n    }\n\n    if (prevSec != text.seconds) {\n      //set the title to the time\n      // if (document.visibilityState == \"visible\") {\n      document.title = text.minutes + ':' + text.seconds;\n      // } else {\n      //   document.title = text.minutes + \":\" + String(parseInt(text.seconds)-1);\n      // }\n\n      //set the prev seconds to the latest second\n      prevSec = text.seconds;\n    }\n  } else {\n    //if there is no event coming up, display text\n    timerDOM.innerText = 'School\\'s Out!';\n    document.title = 'School\\'s Out!';\n  }\n}\n\n/**\n * Converts MS to Minutes, Seconds, and Milliseconds\n * @param {number} duration - The time in MS to convert to m, s, and ms\n * @returns Object containing the minutes, seconds, and ms\n */\nfunction msToTime(duration) {\n  //find the ms, seconds, and minutes\n  var milliseconds = Math.floor(duration % 1000),\n    seconds = Math.floor((duration / 1000) % 60),\n    minutes = Math.floor(duration / (1000 * 60));\n\n  //add 0 to beginning of numbers if it's only one digit\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  seconds = seconds < 10 ? '0' + seconds : seconds;\n  milliseconds =\n    milliseconds < 100\n      ? milliseconds < 10\n        ? '00' + milliseconds\n        : '0' + milliseconds\n      : milliseconds;\n\n  return {\n    minutes: minutes,\n    seconds: seconds,\n    milliseconds: milliseconds,\n  };\n}\n\n//show the naming menu to change names of periods\ndocument.querySelector('#shownaming').addEventListener('click', () => {\n  const naming = document.querySelector('#naming');\n  if(naming.classList.contains('hidden')) {\n    document.querySelector('#naming').classList.add('shown');\n    document.querySelector('#naming').classList.remove('hidden');\n  } else if(naming.classList.contains('shown')) {\n    document.querySelector('#naming').classList.add('hidden');\n    document.querySelector('#naming').classList.remove('shown');\n  }\n});\n\n//change period name on input\ndocument.querySelectorAll('.pinput').forEach(el => {\n  el.addEventListener('input', (e) => {\n    let input = e.target;\n    setClassName(input.attributes.id.value[1], input.value);\n  });\n})\n\n/**\n * Change a class name\n * @param {string} period - The system-defined period name to change\n * @param {string} className - The user-defined name to change it to\n */\nfunction setClassName(period, className) {\n  //only changes if there is local storage enabled\n  if (hasStorage) {\n    const el = document.querySelector(`tr[value=\"${period}\"] td:nth-child(1)`)\n    //if there is an actual class name, set the name\n    if (className && className != '') {\n      localStorage.setItem(period, className);\n      if(el) {\n        el.textContent = period + ': ' + className;\n      }\n    } else {\n      //if not, remove it and reset the schedule\n      localStorage.removeItem(period);\n      if(el) {\n        el.textContent = period;\n      }\n    }\n  }\n}\n\n// let alertHidden = false;\n// function showAlert(text) {\n//   if (!alertHidden) {\n//     const alert = document.querySelector('.alert')\n//     document.querySelector('#alert-text').textContent = text;\n//     if(!alert.classList.contains('alert-visible')) {\n//       alert.classList.add('alert-visible');\n//     }\n//   }\n// }\n\n// document.querySelector('#alert-close').addEventListener('click', () => {\n//   document.querySelector('.alert').classList.remove('alert-visible')\n//   alertHidden = true;\n// })"],"names":["relList","link","processPreload","mutations","mutation","node","getFetchOpts","script","fetchOpts","hasStorage","defaultAllSchedules","latestIntervalID","newDebugDate","date","ms","override","nextTime","checkForChanges","data","response","generateSchedule","allSchedules","dayNum","currentSchedule","curDate","dateString","times","i","currentP","start","timeStringToDate","end","startAPM","endAPM","pTitle","getClassName","tr","el","name","renderTimer","period","timeString","output","numbers","findNext","timesList","prevSec","prevNext","timerDOM","difference","text","msToTime","duration","milliseconds","seconds","minutes","naming","input","setClassName","className"],"mappings":"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"}